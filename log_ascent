#!/usr/bin/env python

"""Script for logging an ascent using the ascent module."""


import datetime
import sys

from ascent import Ascent, AscentError, AscentLoggingError
import utils


# Preliminaries

args = sys.argv[1:]

usage = "Usage: log_ascent [--help] csvfile"

if not args:
    sys.exit(usage)

if args[0] == "--help":
    print(usage)
    sys.exit(0)

csvfile = args[0]


# Get ascent info

route, grade, crag = utils.get_route_info()

date_in = input(
    "Enter the date of the ascent in YYYY-MM-DD format "
    "(or 't' for today or 'y' for yesterday): "
)


# Log the ascent

def abort_logging_ascent():
    print("Aborted logging the above ascent")
    sys.exit(0)

def fail_to_log_ascent(reason):
    sys.exit(f"Failed to log the above ascent: {reason}")


if date_in in {"t", "y"}:
    today = datetime.date.today()

    if date_in == "t":
        date = today
    else:
        date = today - datetime.timedelta(days=1)
else:
    try:
        date = datetime.date.fromisoformat(date_in)
    except ValueError:
        fail_to_log_ascent("date must be a valid date in YYYY-MM-DD format")


known_crags = utils.known_crags(csvfile)

unknown_crag = crag not in known_crags

if unknown_crag:
    print(f"Warning: '{crag}' is not a known crag")

    if known_crags:
        print("Known crags currently include:", "\n".join(known_crags), sep="\n")

    cont = input("Continue logging the above ascent (y/n)? ")

    while True:
        if cont == "y":
            break

        if cont == "n":
            abort_logging_ascent()

        cont = utils.oops_try_again()


try:
    ascent = Ascent(route, grade, crag, date)
except AscentError as e:
    fail_to_log_ascent(e)


print(f"Ascent to be logged: {ascent}")

log = input(f"Log the above ascent in {csvfile} (y/n)? ")

while True:
    if log == "y":
        try:
            ascent.log(csvfile)
            break
        except AscentLoggingError as e:
            fail_to_log_ascent(e)

    if log == "n":
        abort_logging_ascent()

    log = utils.oops_try_again()


if unknown_crag:
    utils.update_known_crags(csvfile)
    print(f"Added '{crag}' to known crags")
