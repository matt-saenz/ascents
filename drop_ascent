#!/usr/bin/env python

"""Script for dropping an ascent."""


import os
import sys
import tempfile

import utils


args = sys.argv[1:]

if not args:
    sys.exit("Usage: drop_ascent csvfile")

csvfile = args[0]


# Not collecting date since ascents are unique on route, grade, and crag

route, grade, crag = utils.get_route_info()


print(f"Ascent to be dropped: {route} {grade} at {crag}")

drop = input(f"Drop the above ascent from {csvfile} (y/n)? ")

while True:
    if drop == "y":
        break

    if drop == "n":
        print("Aborted dropping the above ascent")
        sys.exit(0)

    drop = utils.oops_try_again()


row_to_drop = [route, grade, crag]

try:
    old = utils.open_csvfile(csvfile)
except FileNotFoundError:
    sys.exit(f"Error: {csvfile} not found")
else:
    temp = tempfile.NamedTemporaryFile("w", encoding="utf-8", newline="", delete=False)

    with old, temp:
        reader = utils.csv_reader(old)
        writer = utils.csv_writer(temp)

        header = next(reader)
        writer.writerow(header)

        # Because of the logic of csvfile, there should only ever be
        # 0 or 1 rows dropped

        rows_dropped = 0

        for row in reader:
            if row[:3] != row_to_drop:
                writer.writerow(row)
            else:
                print(f"Dropping ascent: {row}")
                rows_dropped += 1

    os.replace(temp.name, csvfile)


print(f"Dropped {rows_dropped} row(s) from {csvfile}")

if rows_dropped:
    utils.update_known_crags(csvfile)
else:
    print(f"No ascent found matching {row_to_drop}")
